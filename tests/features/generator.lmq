function fibonacci() {
  let last = 0;
  let current = yield 1;

  while (true) { 
    current = last + current;
    last = current - last;
    yield current;
  }
}

const generator = fibonacci();
println("Testing Infinite Fibonacci number generator: ${generator}");
let i = 1;
while (i <= 10) {
  println("Fibonacci number at index ${i}: ${generator.next().value}");
  i++;
}

println("");

class MultiGenerator {  
  function inner(arg, arg2) { 
    println("Inner Generator starts...");
    yield arg;
    yield arg2;
    println("Inner Generator ends...");
  }

  function middle(arg, arg2) { 
    println("Middle Generator starts...");
    yield arg;
    yield from this.inner(2, 3);
    yield arg2;
    println("Middle Generator ends...");
  }

  function outer(arg, arg2) { 
    println("Outer Generator start...");
    yield arg;
    yield from this.middle(1, 4);
    yield arg2;
    println("Outer Generator ends..."); 
  }
}

println("Testing nested generators:");
const multi = MultiGenerator();
const generator2 = multi.outer(0, 5);
println("Generator receiver: ${generator2.getReceiver()}");
while (!generator2.nextFinished()) { 
  println("Generator yield value: ${generator2.value}");
}
