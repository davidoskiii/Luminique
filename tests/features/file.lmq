using luminique::std::io::File;

const file = File("tests/io_output/file_input.txt");

println("Creating an file object for an existing .txt file: ");
println(file);

println("File exists: ${file.exists()}");

println("File is file: ${file.isFile()}");

println("File is directory: ${file.isDirectory()}");

println("File is readable: ${file.isReadable()}");

println("File is writable: ${file.isWritable()}");

println("File last accessed: ${file.lastAccessed()}");

println("File last modified: ${file.lastModified()}");

println("File size: ${file.size()} bytes");

println("File absolute path: ${file.getAbsolutePath()}");

println("");

const file2 = File("tests/io_output/temp.txt");

println("Creating a file object for a nonexistent .txt file: ");
println(file2);

println("File exists: ${file2.exists()}");

println("Create this temp file:");
file2.create();

println("File exists: ${file2.exists()}");

println("File is readable: ${file2.isReadable()}");

println("File is writable: ${file2.isWritable()}");

println("Set file to be writable...");
file2.setWritable(true);

println("File is writable: ${file2.isWritable()}");

println("Remove this temp file:");
file2.delete();

println("File exists: ${file2.exists()}");

println("");

const dir = File("tests/io_output");

println("Creating a file object for an existing directory.");
println(dir);

print("Directory exists: ");
println(dir.exists());

print("Directory is file: ");
println(dir.isFile());

print("Directory is directory: ");
println(dir.isDirectory());

println("");

const dir2 = File("tests/temp");

println("Creating a file object for a nonexistent directory.");
println(dir2);

print("Directory exists: ");
println(dir2.exists());

println("Create this temp directory...");
dir2.mkdir();

print("Directory exists: ");
println(dir2.exists());

println("Remove this temp directory...");
dir2.rmdir();

print("Directory exists: ");
println(dir2.exists());
