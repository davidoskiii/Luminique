using luminique::std::chrono;

// 'normal' function

function isEven(n) {
  return n % 2 == 0;
}

println(isEven(3));
println(isEven(10));

print("Class of function 'isEven()' is: ");
println(isEven.getClassName());

println("");

// variadic function

function sum(...args) {
  let r = 0;
  for (i : args) {
    r = r + i;
  }
  return r;
}

println("Sum of 1, 2, 3, 4, 5 is ${sum(1, 2, 3, 4, 5)}.\n");

// closure 

function outer() {
  let x = "value";
  function middle() {
    function inner() {
      println(x);
    }

    println("Create inner closure");
    return inner;
  }

  println("Return from outer");
  return middle;
}

let mid = outer();
let in = mid();
in();

print("Class of function 'in()' is: ");
println(in.getClassName());

print("function 'in()' is native: ");
println(in.isNative());

let time = chrono::timeNow;

println("Assinging variable 'time' as native function 'chrono::timeNow'...");
print("Class of function 'time()' is: ");

println(time.getClassName());
print("function 'time()' is native: ");

println(time.isNative());

print("\n");

// anonymous

println("Testing anonymous functions:");

let randomFunction = function (a, b, c) {
  return a + b + c;
}; // because the statement is 'let' we need to conclude the function with a semicolon

println("Calling 'randomFunction(1, 1, 1)': ${randomFunction(1, 1, 1)}");

print("\n");

// lambdas

println("Testing lambda functions:");

let lambda1 = lambda (a, b, c) : (a + b + c);

println("Calling 'lambda1(1, 1, 1)': ${lambda1(1, 1, 1)}");

let lambda2 = lambda (a, b) : (
  a = a**b;
  a = a + 2;
  a // No semicolon because it's the return value 
);

println("Calling 'lambda2(2, 4)': ${lambda2(2, 4)}\n");

println("Testing nonlocal return for lambda function: ");

function nonlocal(closure) {
  println("Start closure");
  closure();
  println("Local return");
}

nonlocal( lambda () : (println("Nonlocal return"); return 0; ) );
