#ifndef cluminique_scanner_h
#define cluminique_scanner_h

typedef enum {
  // Single-character tokens.
  TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
  TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
  TOKEN_LEFT_BRAKE, TOKEN_RIGHT_BRAKE,
  TOKEN_COMMA, TOKEN_DOT, TOKEN_DOT_DOT_DOT, TOKEN_MINUS, TOKEN_PLUS,
  TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,
  TOKEN_MODULO, TOKEN_POWER, TOKEN_COLON,
  TOKEN_QUESTION, TOKEN_PIPE, TOKEN_COLON_COLON,
  TOKEN_AMP, TOKEN_CARRET, TOKEN_TILDA,

  // One or two character tokens.
  TOKEN_BANG, TOKEN_BANG_EQUAL,
  TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
  TOKEN_GREATER, TOKEN_GREATER_EQUAL,
  TOKEN_LESS, TOKEN_LESS_EQUAL,
  TOKEN_PLUS_PLUS, TOKEN_MINUS_MINUS,
  TOKEN_SHOWEL_L, TOKEN_SHOWEL_R,

  // Literals.
  TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER, TOKEN_INT,
  TOKEN_INTERPOLATION, TOKEN_HEX, TOKEN_OCT, TOKEN_BIN,

  // Keywords.
  TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,
  TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,
  TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,
  TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE, TOKEN_CASE,
  TOKEN_DEFAULT, TOKEN_SWITCH, TOKEN_DO, TOKEN_CONST,
  TOKEN_THROW, TOKEN_TRY, TOKEN_CATCH, TOKEN_FINALLY,
  TOKEN_BREAK, TOKEN_CONTINUE, TOKEN_REQUIRE, TOKEN_LAMBDA,
  TOKEN_AS, TOKEN_NAMESPACE, TOKEN_USING, TOKEN_TYPEOF,
  TOKEN_STATIC, TOKEN_ASSERT,

  TOKEN_ERROR, TOKEN_EOF
} TokenType;

typedef struct {
  TokenType type;
  const char* start;
  int length;
  int line;
  int startColumn;
  int endColumn;
} Token;

void initScanner(const char* source);
Token scanToken();

#endif
